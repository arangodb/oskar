#!/bin/bash
set -u

script_dir="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
. "$script_dir/lib/oskar.bash"

# Task:

# Preconditions:
# - Necessary directories MUST exist before calling this script
# - There should be some new files in the incoming directory

# Postconditions (on success):
# - Processed files are moved from incoming to the repository
# - Processed files have been singed
# - Repositories are build and updated
# - THERE IS NO GUARANTEE that all necessary files have been
#   processed and are present in the release (we would need a release description)

usage(){
    echo "you did not provide enough arguemnts"
    echo "createRepo <version> <in_path> <repo_path> <in_name> <repo_name> <arch> <package_type>"
    echo "provided: $*"
    exit 1
}

provided(){
    echo -n "createRepo <version:'$1'> <in_path'$2'> <repo_path'$3'>"
    echo " <in_name'$4'> <repo_name'$5'> <arch'$5'> <package_type'$7'>"
}

#provided "$@"

### incoming structure
## /mnt/data/fileserver/CO$ ls
## centoseven  debianjessie         debianstretch     macos             opensusethirteen     ubuntuseventeenofour  ubuntusixteenofour
## centosix    debianjessiearmhfxc  fedoratwentyfive  opensusefortytwo  ubuntufourteenofour  ubuntusixteenarmhfxc  windows

### repository structure
## jenkins@MA-h2652267:/mnt/data/localstage/enterprise/arangodb32/Debian_9.0$ tree | grep -v deb
## .
## ├── amd64
## ├── Packages
## ├── Packages.bz2
## ├── Release
## ├── Release.gpg
## └── Release.key

## /mnt/data/localstage/enterprise/arangodb32/Fedora_25$ tree | grep -v rpm
## .
## ├── arangodb.repo
## ├── repodata
## │   ├── 09060a4d836de11483fecb7865ba179bbd56b29fb4eb1b36f3cbd0ffb7b5dc75-other.sqlite.bz2
## │   ├── 31c716629757f29a18cd1823c1e513fe5e0e62943ec4f0910cc3bbf75d2f8efc-other.xml.gz
## │   ├── 3ae4c0351878b2cc61c9d2810008180fc0169f2871f2894c918a3d819687de4f-filelists.sqlite.bz2                                                                             ## │   ├── 6dc10e2a7f213006b68884a2e649aa1316dfd7cdda03441583d28b6f5a7aa038-primary.sqlite.bz2
## │   ├── 82db29d7499f86a4263d30e26f7380302870def0c8789c2c9172e0c6e6e663a4-primary.xml.gz                                                                                   ## │   ├── b04d376ecbc7bd2715a8ea77bff7ee72d7454e4122bc3026da5c9bc79cfdd4f0-filelists.xml.gz                                                                                 ## │   ├── repomd.xml
## │   ├── repomd.xml.asc
## │   └── repomd.xml.key
## └── x86_64
##
## 2 directories, 61 files

## . `dirname $0`/../config/default.inc

create_repo(){
    #set -x
    provided "$@"
    local version="$1"                     # 3.4.12
    local major_minor="${version}"      # 3.4
    local version_fs="${version/./}"   # 34
    local in_path="$2"                     # /mnt/data/fileserver
    local repo_path="$3"                   # /mnt/data/localstage
    local in_name="$4"                     # debianjessie
    local repo_name="$5"                   # Debian_8.0
    local arch="$6"                        # amd64 -- we might need a archlist like "amd64:armhf"
    local package_type="$7"                # package_type
    local in_community="Community"         # community
    local repo_community="Community"
    local in_enterprise="Enterprise"       # enterprise
    local repo_enterprise="Enterprise"     # enterprise
    local url_base="https://download.arangodb.com" # (rpm only)
    local url_secret="9c169fe900ff79790395784287bfa82f0dc0059375a34a2881b9b745c8efd42e"


    url_community="$url_base/arangodb${version_fs}/$repo_name"
    url_enterprise="$url_base/$url_secret/arangodb${version_fs}/$repo_name"

    setup_gpg

  echo "community #################################"
  create_repo_edition "$version" "$major_minor" "$arch" "$package_type" \
                      "$in_path/$in_community/$in_name" \
                      "$repo_path/$repo_community/$repo_name" \
                      "$url_community"
  echo "enterprise #################################"
    create_repo_edition "$version" "$major_minor" "$arch" "$package_type"\
                        "$in_path/$in_enterprise/$in_name" \
                        "$repo_path/$repo_enterprise/$repo_name" \
                        "$url_enterprise"
}

create_repo_edition(){
    #create one editon community or enterprise for a given version
    #set -x
    local version="$1"
    local major_minor="$2"
    local arch="$3"
    local package_type="$4"
    local in="$5"
    local repo="$6"
    local url="$7"
    #set +x

    case $package_type in
        deb)
            create_repo_deb "$@"
        ;;
        rpm)
            create_repo_rpm "$@"
        ;;
    esac
}

create_repo_deb(){
    echo "create deb packages ########################"
    local version="$1"
    local major_minor="$2"
    local arch="$3"
    local -a arch_array
    IFS=':' read -r -a arch_array <<<"$arch"
    local package_type="$4"
    local in="$5"
    local repo="$6"
    local url="$7"

    # sign files
    cd "$in" || { echo "can not enter source dir"; exit 1; }
    local update=false
    for file in "$in"/*"$version"*.deb; do
        fbase="${file%.deb}"
        noext="${fbase##*/}"
        [[ -f "$file" ]] || ferr "create_repo_deb - file: $file - does not exist"
        [[ -d "$repo" ]] || ferr "create_repo_deb - reop: $repo - does not exist"
        if cmp -s "$file" "$repo/amd64/${noext}.deb"; then
	  echo "file already exists '$file'"
	else
	  cp "$file" "$repo/amd64/${noext}.deb" \
	      || { echo "could not move $file" to "$repo"; exit 1;  }
	  "$script_dir"/debSign "$repo/amd64/${noext}.deb" || ferr "failed to sign $repo/amd64/${noext}.deb"
	  update=true
        fi
    done

    $update || { echo "nothing to do"; return; }

    cd "$repo" || { echo "can not enter repo"; exit 1; }
    echo
    echo "now building reop"
    echo

    # create Packages content for all archs
    echo "apt-ftparchive packages - this may take some time (~ 1 minute)"
    #time -p apt-ftparchive packages $arch > Packages || ferr "failed"
    rm -fr Packages
    for arch in "${arch_array[@]}"; do
        echo "working on arch: $arch"
        apt-ftparchive packages $arch >> Packages || ferr "failed to scan packages for $arch"
    done

    # update Packages.bz2
    echo "update Packages.bz2"
    rm -f Packages.bz2; bzip2 -kf Packages || ferr "failed to uppdate Packages.bz2"

    # add release information
    echo "apt-ftparchive release"
    apt-ftparchive release . > Release || ferr "failed to create Release file"

    #sign release
    echo "sign release"
        gpg2 --pinentry-mode=loopback --digest-algo SHA512 \
         --passphrase-fd 0 --yes -abs -u "$KEYNAME" \
         -o Release.gpg Release <<<"arangodb" || ferr "failed to sign Release"

}
create_repo_rpm(){
    echo "create rpm packages ########################"
    local version="$1"
    local major_minor="$2"
    local arch="$3"
    local -a arch_array
    IFS=':' read -r -a arch_array <<<"$arch"
    local package_type="$4"
    local in="$5"
    local repo="$6"
    local url="$7"

    # sign files
    cd "$in" || { echo "can not enter source dir"; exit 1; }
    local update=false
    for file in "$in"/*"$version"*.rpm; do
        fbase="${file%.rpm}"
        noext="${fbase##*/}"
        if cmp -s "$file" "$repo/x86_64/${noext}.rpm"; then
	  echo "file already exists '$file'"
	else
	  cp "$file" "$repo/x86_64/${noext}.rpm" \
	      || { echo "could not move $file" to "$repo"; exit 1;  }
	  "$script_dir"/rpmSign.exp "$repo/x86_64/${noext}.rpm" || ferr "failed to sign $file"
	  update=true
	fi
    done

    $update || { echo "nothing to do"; return; }

    cd "$repo" || { echo "can not enter repo"; exit 1; }
    echo
    echo "now building reop"
    echo

    ensure createrepo --update --verbose "$repo" || ferr "failed to create repo"
    gpg2 --armor --export info@arangodb.com  > "$repo/repodata/repomd.xml.key" || ferr "failed to export repomd.xml.key"
    rm -fr "$repo/repodata/repomd.xml.asc" || ferr "failed to delete old signature"
    gpg2 -a --detach-sign "$repo/repodata/repomd.xml" || ferr "failed to export repomd.xml"

    cat <<EOF > "${repo}/arangodb.repo"
[arangodb]
name=ArangoDB Project
type=rpm-md
baseurl=$url
gpgcheck=1
gpgkey=$url/repodata/repomd.xml.key
enabled=1
EOF

}

## run this only if it is run directly
if [ "$0" = "$BASH_SOURCE" ]; then
    (($# < 7)) && usage
    create_repo "$@" || exit 1
    exit 0
fi
