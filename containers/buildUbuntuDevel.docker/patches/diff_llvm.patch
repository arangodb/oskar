diff --git a/openmp/runtime/src/ompd-specific.cpp b/openmp/runtime/src/ompd-specific.cpp
index c4018789e..07da27023 100644
--- a/openmp/runtime/src/ompd-specific.cpp
+++ b/openmp/runtime/src/ompd-specific.cpp
@@ -82,6 +82,7 @@ void ompd_init() {
   char *libname = NULL;
 
 #if KMP_OS_UNIX
+#if 0
   // Find the location of libomp.so thru dladdr and replace the libomp with
   // libompd to get the full path of libompd
   Dl_info dl_info;
@@ -97,6 +98,7 @@ void ompd_init() {
     strncpy(libname, dl_info.dli_fname, lib_path_length);
     memcpy(libname + lib_path_length, "/libompd.so\0", 12);
   }
+#endif
 #endif
 
   const char *ompd_env_var = getenv("OMP_DEBUG");
diff --git a/openmp/runtime/src/ompt-general.cpp b/openmp/runtime/src/ompt-general.cpp
index 55a936575..a71c1aef3 100644
--- a/openmp/runtime/src/ompt-general.cpp
+++ b/openmp/runtime/src/ompt-general.cpp
@@ -164,8 +164,7 @@ ompt_start_tool(unsigned int omp_version, const char *runtime_version) {
   // runtime library is linked before the tool. Since glibc 2.2 strong symbols
   // don't override weak symbols that have been found before unless the user
   // sets the environment variable LD_DYNAMIC_WEAK.
-  ompt_start_tool_t next_tool =
-      (ompt_start_tool_t)dlsym(RTLD_NEXT, "ompt_start_tool");
+  ompt_start_tool_t next_tool = nullptr;
   if (next_tool) {
     ret = next_tool(omp_version, runtime_version);
   }
@@ -245,14 +244,14 @@ ompt_tool_windows(unsigned int omp_version, const char *runtime_version) {
 #endif
 
 static ompt_start_tool_result_t *
-ompt_try_start_tool(unsigned int omp_version, const char *runtime_version) {
+ ompt_try_start_tool(unsigned int omp_version, const char *runtime_version) {
   ompt_start_tool_result_t *ret = NULL;
-  ompt_start_tool_t start_tool = NULL;
+  // ompt_start_tool_t start_tool = NULL;
 #if KMP_OS_WINDOWS
   // Cannot use colon to describe a list of absolute paths on Windows
   const char *sep = ";";
 #else
-  const char *sep = ":";
+  // const char *sep = ":";
 #endif
 
   OMPT_VERBOSE_INIT_PRINT("----- START LOGGING OF TOOL REGISTRATION -----\n");
@@ -275,7 +274,7 @@ ompt_try_start_tool(unsigned int omp_version, const char *runtime_version) {
     OMPT_VERBOSE_INIT_PRINT("----- END LOGGING OF TOOL REGISTRATION -----\n");
     return ret;
   }
-
+#if 0
   // Try tool-libraries-var ICV
   OMPT_VERBOSE_INIT_CONTINUED_PRINT("Failed.\n");
   const char *tool_libs = getenv("OMP_TOOL_LIBRARIES");
@@ -348,6 +347,8 @@ ompt_try_start_tool(unsigned int omp_version, const char *runtime_version) {
   } else {
     OMPT_VERBOSE_INIT_PRINT("No OMP_TOOL_LIBRARIES defined.\n");
   }
+#endif
+  return nullptr;
 
   // usable tool found in tool-libraries
   if (ret) {
@@ -355,6 +356,7 @@ ompt_try_start_tool(unsigned int omp_version, const char *runtime_version) {
     return ret;
   }
 
+#if 0
 #if KMP_OS_UNIX
   { // Non-standard: load archer tool if application is built with TSan
     const char *fname = "libarcher.so";
@@ -383,6 +385,7 @@ ompt_try_start_tool(unsigned int omp_version, const char *runtime_version) {
       }
     }
   }
+#endif
 #endif
   OMPT_VERBOSE_INIT_PRINT("No OMP tool loaded.\n");
   OMPT_VERBOSE_INIT_PRINT("----- END LOGGING OF TOOL REGISTRATION -----\n");
