#!/bin/bash

################################################################################
### HELPER FUNCTIONS ###########################################################
################################################################################

minimum_version() {
    local left=${1%%-*}
    local right=${2%%-*}
    declare -l -a left_arr
    declare -l -a right_arr

    IFS='.' read -r -a left_arr <<<"$left"
    IFS='.' read -r -a right_arr <<<"$right"

    local len=${#left_arr[@]}
    local other_len=${#right_arr[@]}
    if (( other_len < len )); then
        len=other_len
    fi

    local i
    for (( i=0; i < len; i++ )); do
        left=${left_arr[$i]}
        right=${right_arr[$i]}
        if (( left == right )); then
            continue
        elif (( left < right )); then
            return 1
        else
            return 0
        fi
    done

    # Return false because we test for greater-equal.
    # Set this to 1 for a strict greater.
    return 0
}

# a grep that does not fail if there are no matches
# can be used with multiple pipes where grep is not
# expected to macht always something
grep_ignore_empty(){
    grep "$@"
    local rv=$?

    # grep exit status is 1 if nothing is matched
    (( rv == 1 )) &&  { false && debug "echo no match found via 'grep $@'" >&2; return 0; }
    return $rv
}

# make it available for sub-shells
export -f grep_ignore_empty

show_config(){
    echo "  build lib sourced"
    echo "  passed arguments: '$@'"
    echo
    section "ArangoDB documentation build configuration"
    echo "directories:"
    echo "  script dir:  $script_dir"
    echo "  work:         $ARANGO_WORK"
    echo "  source:       $ARANGO_SOURCE"
    echo "  books:        $ARANGO_SOURCE_DOC_BOOKS"
    echo "  build:        $ARANGO_BUILD_DOC"
    echo "  build ppdir:  $ARANGO_BUILD_DOC_PRE"
    echo "  build books:  $ARANGO_BUILD_DOC_OUT"
    echo
    echo "versions:"
    echo "  newVersionNumber: $newVersionNumber - from : arangodb/VERSION"
    echo "  VERSION: $VERSION"
    echo "  BROWSEABLE_VERSIONS: $BROWSEABLE_VERSIONS"
    echo "  INSTALLED_GITBOOK_VERSION: $INSTALLED_GITBOOK_VERSION"
    echo "  RELEASE_DIRECTORY: $RELEASE_DIRECTORY"
    echo
    echo "google:"
    echo "  GCHANGE_FREQ: $GCHANGE_FREQ"
    echo "  GPRIORITY: $GPRIORITY"
    echo "  ALL_GSEARCH_ID:"
    for id in  "${ALL_GSEARCH_ID[@]}"; do
        echo "    $id"
    done
    echo

    sleep 2
}

run_cmd(){
    section "run external =>" | sed 's/-/#/g'
    echo "($(date +%H:%M:%S)) execute in '$(pwd)':"
    echo "$@"
    section "" | sed 's/-/#/g'
    time "$@"
    local status=$?
    section "<= run external" | sed 's/-/#/g'
    return $status
}

ensure_cmd(){
    run_cmd "$@"
    (( $? != 0 )) && ferr "failed to run: '$@' "
    return 0
}

spin_cmd() {
    ARANGO_SPIN=${ARANGO_SPIN:-false}
    if $ARANGO_SPIN; then
        {   local scount=1
            local arr=( "Was ist denn jetzt mit gitbook?"
                        "Was muss ich machen?"
                        "Muss das so kompliziert sein?"
                        "Drei!!!"
                        "Soll ich das selber machen?"
                        "Das bekommt man von Hand ohne diese ganzen Scripte schneller hin!"
                        "Es soll auch irgendwann fertig werden!"
                        "Wissen wir was wir tun?"
                        "Es gibt kein Buch ArangoDB!"
                        "Der Dokumentation kann man nicht trauen! Guck lieber in den Code!!"
                      )
            while :; do
                for a in / - \\ \|
                do
                    printf '%s\b' "$a";
                    sleep 0.1;
                    (( scount++ ))
                    if (( scount % 600 == 0)); then
                        echo "${arr[$(( $RANDOM % ${#arr[@]}))]}"
                    fi
                done;
            done &
        } 2> /dev/null
        local spin_pid=$!

        run_cmd "$@"

        local status=$?
        { kill $spin_pid && wait; } 2>/dev/null
        return $status
    else
        run_cmd "$@"
    fi
}

run_gitbook(){
    local cache="$1"
    shift

    local c=true
    if [[ $cache == "" ]] || [[ $cache == "fake cache" ]]; then
        c=false
    fi


    local cmd=( gitbook "${GITBOOK_ARGS[@]}" "$@" )
    spin_cmd "${cmd[@]}"
    if (( $? != 0 )) ; then
        section "" | sed 's/-/=/g'
        section "book.json" | sed 's/-/#/g'
        cat book.json

	local plugins=$(mktemp)
	cat "$book_src/book.json" | sed -e 's/@GPRIORITY@/0/' | jq .plugins > "$plugins" \
            || ferr "failed to extract plugins from source books.json. Make sure it contains valid json!"

        $c && section "diff" | sed 's/-/#/g'
        $c && diff "$plugins" "$cache/book.json.plugins"
        $c && echo "plugins must not differ"

        section "modules" | sed 's/-/#/g'
        ls -lisah node_modules
        section "" | sed 's/-/=/g'
        echo "try to run ./scripts/buildContainerDocumentation --force-update if plugins/modules are missing"
        ferr "running gitbook failed"
    fi
}

run_ditaa() {
    #create ditaa images
    local book_name="$1"
    local book_src="$2"
    local book_pre="$3"
    local book_out="$4"

    cd "$book_src"
    local use_ditaa=false
    if type ditaa; then
        say " - generating ditaa images"
        use_ditaa=true
    else
        say "- generating FAKE ditaa images - no ditaa installed"
    fi

    local file
    local dest
    local src_dir="$book_src"

    while read file; do
        dest="${file#$src_dir}"
        dest="${dest//ditaa/png}"
        dest="$src_dir/$dest"     #must be generated to source for generateMdFiles.py
        # if dest dir is not available then the creation of the
        # directory structures did most proably not work correctly
        if $use_ditaa; then
            run_cmd ditaa $(expand_cygpath "$file" "$dest") || ferr "ditaa for $file to $dest failed"
        else
            local fake="$ARANGO_SOURCE/js/node/node_modules/mocha/images/error.png"
            cp "$fake" "$dest" || ferr "fake ditaa for $file to $dest failed"
        fi
    done < <(find ${src_dir} -name "*.ditaa")
}

################################################################################
### CHECKS #####################################################################
################################################################################

book_src_checks() {
    section "Source Checks - Book $1"
    source_check_bad_code_sections "$@" || ferr "fail"
    source_check_bad_headings      "$@" || ferr "fail"
    source_check_images_referenced "$@" || ferr "failed check for unused iamges ($?)"
}


book_pre_checks() {
    section "Preprocessed Checks - Book $1"
    pp_check_summary              "$@" || ferr "fail"
    pp_check_leftover_docublocks  "$@" || ferr "fail"
    pp_check_restheader_leftovers "$@" || ferr "fail"
    pp_check_two_links            "$@" || ferr "fail"
    pp_check_directory_link       "$@" || ferr "fail"
    pp_check_html_link            "$@" || ferr "fail"
}

book_out_checks(){
    section "Output Checks - Book $1"
    out_markdown_leftovers "$@" || ferr "fail"
}

cross_src_checks(){
    section "Cross Source Checks"
    cross_source_check_docublocks
}

cross_pre_out_checks(){
    section "Cross Preprocessed and Output Checks"
    cross_out_check_dangling_anchors
}

#book_src_checks "${book_name}" "$book_src" "$book_pre" "$book_out"
#book_pre_checks "${book_name}" "$book_src" "$book_pre" "$book_out"
#book_out_checks "${book_name}" "$book_src" "$book_pre" "$book_out"
#cross_src_checks
#cross_pre_out_checks

################################################################################
### SOURCE CHECKS ##############################################################

source_check_bad_code_sections() {
    # checks for ``` followd by a blank
    local book_name="$1"
    local book_src="$2"
    local book_pre="$3"
    local book_out="$4"

    echo "+ bs 01 checking for bad code sections in ${book_name}"

    if grep -qR  "^${TRIPPLETICS} *.* " "${book_src}"; then
        err "tripple tics with blanks afterwards found: "
        grep -R  "^${TRIPPLETICS} *.* " "${book_src}"
        exit 1
    fi
}

source_check_bad_headings() { #DONE
    # TODO description
    local book_name="$1"
    local book_src="$2"
    local book_pre="$3"
    local book_out="$4"

    echo "+ bs 02 checking for headers that won't proper display on github in ${book_name}"
    if grep -qRI  '^##*[a-zA-Z]' "${book_src}"; then
        err "Headlines broken on github found: "
        grep -RI  '^##*[a-zA-Z]' "${book_src}"
        exit 1
    fi
}

source_check_images_referenced() { #OK
    # check if all images that are in source are used.
    local book_name="$1"
    local book_src="$2"
    local book_pre="$3"
    local book_out="$4"

    echo "+ bs 03 checking for unused image files ${book_name}"

    local error=false
    while IFS= read -r image; do
        if ! grep -Rq "${image##*/}" "${book_src}"; then
            ! $error && { err "the following images are not referenced by any page: " ; error=true; }
            echo "${image}"
        fi
    done < <(find "${book_src}" -name '*.png')

    if $error; then
        ferr "found unused images"
    fi
}

################################################################################
### PREPROCESSED CHECKS ########################################################

pp_check_summary() { #DONE
    echo "+ bp 01 checking if all md files are included in the SUMMARY.md"

    # check if all md files are included in the SUMMARY.md in the books source
    local book_name="$1"
    local book_src="$2"
    local book_pre="$3"
    local book_out="$4"

    find "$book_pre" -name '*.md' | \
        sed -e "s;$book_pre/;;" | \
        grep -vf "$ARANGO_SOURCE_DOC_BOOKS/SummaryBlacklist.txt" | \
        grep -v gitbook-plugin | \
        grep -v node_modules/ | \
        sort > /tmp/is_md.txt \
        || ferr "failed to create is_md.txt - for some info run: find '${book_pre#/oskar/}' -name '*.md'"

    # in source
    # remove comments
    # remove everything before and after the braces
    grep -v '^ *# '< "${book_src}/SUMMARY.md" | \
        grep '(' | sed -e "s;.*(;;" -e "s;).*;;" | \
        sort  > /tmp/is_summary.txt || ferr "is_summary generation failed"

    #compare both files
    if test "$(comm -3 /tmp/is_md.txt /tmp/is_summary.txt|wc -l)" -ne 0; then
        err "not all files of ${book_name} are mapped to the summary!"
        err "files found       |    files in summary"
        comm -3 /tmp/is_md.txt /tmp/is_summary.txt
        exit 1
    fi
}


pp_check_leftover_docublocks() {
    local book_name="$1"
    local book_src="$2"
    local book_pre="$3"
    local book_out="$4"

    #in ppdir
    echo "+ bp 02 checking for left over docublocks in ${book_name}"
    ERRORS="$(grep_ignore_empty -rl "startDocuBlock" --include "*.md" "$book_pre")" || ferr "Failed running chek for leftover DocuBlocks"
    if [[ -n "${ERRORS}" ]]; then
        err "startDocuBlock markers still found in generated output files:"
        echo "${ERRORS}" | sed -e "s/^/- /g"
        exit 1
    fi
}

pp_check_restheader_leftovers() {
    # TODO description
    local book_name="$1"
    local book_src="$2"
    local book_pre="$3"
    local book_out="$4"

    ## original script:
    ## what is this supposed to do?
    ## - bad use of prune!
    ## - how can the expression match without `-E`
    # ERRORS=$(find "ppbooks/${book_name}" -not \( -path "ppbooks/Drivers/SpringData/*" -prune \) -name "*.md" -exec grep -- '^@[A-Z]*' {} \; -print) || failed "check for restheader leftovers"

    #in ppdir
    #TODO FIXME why is the spring data driver excluded??
    # what is that for "^@[A-Z]*"
    echo "+ bp 03 checking for restheader leftovers in ${book_name}"
    ERRORS="$(find "$book_pre"  -path "*/Drivers/SpringData/*" -prune  -o -name "*.md" -exec bash -c 'grep -E -q -- "^@[A-Z]*" "$1" && echo $1' -- '{}' \; )" || failed "check for restheader leftovers"
    if [[ -n "${ERRORS}" ]]; then
        echo "found these unconverted Swagger Restapi tags: "
        echo "${ERRORS}"
        exit 1
    fi
}

pp_check_two_links() {
    # TODO description
    local book_name="$1"
    local book_src="$2"
    local book_pre="$3"
    local book_out="$4"

    #in ppdir
    local errors=()
    echo "+ bp 04 checking for two links in a single line in ${book_name}"
    while IFS= read -r ppfile; do
        local search=$(grep_ignore_empty -e '](.*](' "${ppfile}")
        local err="$(echo "$search" | grep -v '|' )"
        if [[ -n "${err}" ]]; then
            errors+=( "\n${ppfile}: \n ${err}" )
        fi
    done < <(find "$book_pre" \
                  -path "$book_pre/node_modules*" \
                  -prune -o \
                  -name '*.md' \
                  -print
            ) || ferr "failed checking for two links"

    if [[ "${errors[@]}" ]]; then
        echo "found these files with two links in one line: "
        echo "${errors[@]}"
        ferr "found these files with two links in one line - see above "
    fi
}

pp_check_directory_link() { #OK
    # TODO description
    local book_name="$1"
    local book_src="$2"
    local book_pre="$3"
    local book_out="$4"

    #in ppdir
    echo "+ bp 05 checking for invalid md links in ${book_name}"
    local ERRORS=$( grep -r -E '\[.*\]\(.*\)' "$book_pre" | \
                    grep '\.md:' | \
                    grep -v html | \
                    grep -v http://| \
                    grep -v https:// | \
                    grep -v header.css | \
                    grep -v node_modules | \
                    grep -v node_modules | \
                    grep -v '\.md') || ferr "failed checking for invalid links"


    if [[ -n "$ERRORS" ]]; then
        err "Found directory links! use ../<directory>/README.md instead!"
        echo "${ERRORS}"
        ferr "Found directory links! use ../<directory>/README.md instead!"
    fi
}

pp_check_html_link() {
    local book_name="$1"
    local book_src="$2"
    local book_pre="$3"
    local book_out="$4"

    # TODO description

    set -o pipefail
    book_name="$1"
    msg="$2"
    echo "+ bp 06 checking for invalid HTML links in ${book_name}"

    for book in $ALLBOOKS; do echo "/$book/"; done > /tmp/books.regex

    grep -r -E '\[.*\]\(.*\)' "$book_pre"| \
        grep '\.md:'| grep 'html'| \
        grep -v 'http://' | \
        grep -v 'https://' | \
        grep -v 'header.css' | \
        grep -v -f /tmp/books.regex > /tmp/relative_html_links.txt


    if [[ $(wc -l < /tmp/relative_html_links.txt) != "0" ]]; then
        echo "Found links to .html files inside of the document! use <foo>.md instead!"
        cat  /tmp/relative_html_links.txt
        exit 1
    fi
}


################################################################################
### POST CHECKS ################################################################

out_markdown_leftovers() { #TODO REVIEW
    # checks output for markdown leftovers
    local book_name="$1"
    local book_src="$2"
    local book_pre="$3"
    local book_out="$4"

    local errors
    echo "+ bo 01 checking for remaining markdown snippets in the HTML in ${book_name} "

    echo "  - looking for unconverted markdown titles"
    #looks for - ## lalal (multiple ####)
    errors=$(find "$book_out" -name '*.html' -exec grep -- '^##' {} \; -print) \
        || ferr "checking titles"
    if [[ -n "${errors}" ]]; then
        err "found these unconverted markdown titles"
        echo "${errors}"
        exit 1
    fi

    #check that > is not already converted
    echo "  - looking for double converted > signs"
    errors=$(find "$book_out" -name '*.html' -exec grep -- '&amp;gt;' {} \; -print) \
        || ferr "checking double converted > sings"
    if [[ -n "${errors}" ]]; then
        err "found these double converted > signs"
        echo "${errors}"
        exit 1
    fi

    echo "  - looking for links to plain .md-files (no anchor)"
    local errorsa=()
    while IFS= read -r line; do
        grep '"[a-zA-Z/\.]*\.md\"[ />]' "$line" | grep -v data-filepath
        local rv=$?
        (( rv == 0 )) && errorsa+=( "$line" )
        (( rv == 2 )) && ferr "checking links to plain .md-files"
    done < <(find "$book_out" -name '*.html')

    if [[ -n "${errorsa[@]}" ]]; then
        err "The files referenced do not exist or are parts of other books"
        echo "${errorsa[@]}"
        exit 1

    fi

    echo "  - looking for links to plain .md-files (with anchor)"
    errors=$(find "$book_out" -name '*.html' -exec grep '"[a-zA-Z/\.]*\.md#' {} \; -print) \
        || ferr "checking dangling markdown links"
    if [[ -n "${errors}" ]]; then
        err "The files referenced do not exist or are parts of other books"
        echo "${errors}"
        exit 1
    fi

    echo "  - lookgin for dangling markdown code sections"
    errors=$(find "$book_out" -name '*.html' -exec grep "${TRIPPLETICS}" {} \; -print) \
        || ferr "checking dangling markdown code sections"
    if [[ -n "${errors}" ]]; then
        err "found dangling markdown code sections ( \`\`\` code \`\`\` ) in:"
        echo "${errors}"
        exit 1
    fi

    echo "  - looking for unconverted markdown links"
    ERRORS=$(find "$book_out" -name '*.html' -exec grep '\]<a href' {} \; -print) \
        || ferr "checking unconverted markdown links"
    if [[ -n "${ERRORS}" ]]; then
        err "found unconverted markdown links ([link desciption]< a href): "
        err "maybe you are missing a [ or you use some special char in the decription"
        echo "${ERRORS}"
        exit 1
    fi

    echo "  - looking for markdown leftovers"
    ERRORS=$(find "$book_out" -name '*.html' -exec grep '\[.*\](.*[\.html|\.md|http|#.*])' {} \; -print) \
        || ferr "checking markdown leftovers"
    if [[ -n "${ERRORS}" ]]; then
        err "found unconverted markdown links [something](something):"
        echo "${ERRORS}"
        exit 1
    fi
}

################################################################################
### CROSS CHECKS ###############################################################

#************************************************************
# Check docublocks - checks whether docublock are
#  - files in intermediate output directories and temporary
#    files are excludes (with # in their names)
#  - unique in the source
#  - all docublocks are used somewhere in the documentation
#
cross_source_check_docublocks() { #TODO review
    # This function runs in source only it compares if all the
    # Docublocks are used in the Documentation and if none
    # are missing

    ## TODO - Willi please document the sed expressions what are you doing
    echo "+ cs 01 checking docublocks"

    #########################################################
    #### in doc
    echo "  - find blocks in documentation"
    grep -R '@startDocuBlock' --include "*.h" --include "*.cpp" --include "*.js" \
        --include "*.md" "${ARANGO_SOURCE_DOC_BOOKS}" |\
        grep -v '@startDocuBlockInline' |\
        grep -v stash |\
        grep -v ppbook |\
        grep -v allComments.txt | \
        grep -v Makefile | \
        grep -v '.*~:.*' | \
        grep -v '.*#.*:.*' \
            > /tmp/rawindoc.txt || ferr "failed search for startDocuBlock - with $?"
    debug "lines rawindoc $(cat /tmp/rawindoc.txt | wc -l)"

    grep -R '@startDocuBlockInline' --include "*.h" --include "*.cpp" --include "*.js" \
        --include "*.md" "${ARANGO_SOURCE_DOC_BOOKS}" |\
        grep -v ppbook |\
        grep -v stash |\
        grep -v allComments.txt |\
        grep -v Makefile |\
        grep -v '.*~:.*' |\
        grep -v '.*#.*:.*' \
             >> /tmp/rawindoc.txt || ferr "failed to search for startDocuBlockInline - with $?"
    debug "lines rawindoc $(cat /tmp/rawindoc.txt | wc -l)"

    sed  -e "s;\r$;;" -e "s;.*ck ;;" -e "s;.*ne ;;" < /tmp/rawindoc.txt | sort -u > /tmp/indoc.txt
    debug "lines indoc $(cat /tmp/indoc.txt | wc -l)"
    #### in end
    #########################################################

    #########################################################
    #### in prog
    echo "  - find blocks in DocuBlocks directroy"
    grep -R '^@startDocuBlock' "$ARANGO_SOURCE_DOC/DocuBlocks" --include "*.md" | \
        grep -v aardvark > /tmp/rawinprog.txt || err "failed"
    debug "lines rawinproc $(cat /tmp/indoc.txt | wc -l)"


    # searching the Inline docublocks needs some more blacklisting:
    grep -R '@startDocuBlockInline' --include "*.md" "${ARANGO_SOURCE_DOC_BOOKS}" |\
        grep -v stash |\
        grep -v '.*~:.*' |\
        grep -v '.*#.*:.*' \
             >> /tmp/rawinprog.txt || ferr "failed to search for startDocuBlockInline in source - with $?"
    debug "lines  rawinprog $(cat /tmp/rawinprog.txt | wc -l)"


    # These files are converted to docublocks on the fly and only live in memory.
    local example_dir="$ARANGO_SOURCE_DOC/Examples/"

    # expand filename patterns to null string if no files match instead of to return themselves
    # https://www.endpoint.com/blog/2016/12/12/bash-loop-wildcards-nullglob-failglob
    shopt -s nullglob

    for file in "$example_dir"*.json ; do
        local file_name="${file#$example_dir}"
        local app=${file_name%.json}
        echo "$file" | sed -e "s;.*/;Generated: @startDocuBlock program_options_;" \
                           -e "s;.json;;" \
        >> /tmp/rawinprog.txt
    done

    # disable optional behavior again
    shopt -u nullglob

    echo "Generated: startDocuBlockInline errorCodes">> /tmp/rawinprog.txt
    debug "lines rawinprog $(cat /tmp/rawinprog.txt | wc -l)"

    sed -e "s;\r$;;" -e "s;.*ck ;;" -e "s;.*ne ;;" < /tmp/rawinprog.txt \
        | sort > /tmp/inprog_raw.txt

    sort -u < /tmp/inprog_raw.txt > /tmp/inprog.txt

    debug "lines inprog $(cat /tmp/inprog.txt | wc -l)"
    #### in prog - end
    #########################################################

    #check for duplicates in DocuBlocks Dir
    echo "  - find duplicates in DoucBlock dir"
    if [[ "$(wc -l < /tmp/inprog.txt)" -ne "$(wc -l < /tmp/inprog_raw.txt)" ]]; then
        err "Duplicate entry found in the source trees:"
        comm -3 /tmp/inprog_raw.txt /tmp/inprog.txt
        ferr "Duplicate entry found in the source trees:"
    fi

    # compare Documenation and Docublocks
    echo "  - compare documentation and DoucBlock dir"
    if [[ "$(comm -3 /tmp/indoc.txt /tmp/inprog.txt | wc -l)" -ne 0 ]]; then
        err "Not all blocks were found on both sides:"
        echo "Documentation      |     Programcode:"
        comm -3 /tmp/indoc.txt /tmp/inprog.txt
        if [[ "$(comm -2 -3 /tmp/indoc.txt /tmp/inprog.txt | wc -l)" -gt 0 ]]; then
            # TODO missing in doc? - provide more useful messages
            echo "Documentation: "
            for grepit in $(comm -2 -3 /tmp/indoc.txt /tmp/inprog.txt); do
                grep "$grepit" /tmp/rawindoc.txt
            done
        fi
        if [[  "$(comm -1 -3 /tmp/indoc.txt /tmp/inprog.txt |wc -l)" -gt 0 ]]; then
            # TODO missing in doc? - provide more useful messages
            echo "Program code:"
            for grepit in $(comm -1 -3 /tmp/indoc.txt /tmp/inprog.txt); do
                grep "$grepit" /tmp/rawinprog.txt | sed "s;/// @startDocuBlock;\t\t;"
            done
        fi
        say "There is a mismatch of DocuBlocks used in the Documenation the Blocks provided"
        ferr "Not all blocks were found on both sides"
    fi
}

cross_out_check_dangling_anchors() {
    rm -rf /tmp/tags/

    echo "+ co 01 checking anchors"
    echo "  - create tag structure" #OK
    # go through html files
    # find id="tags"
    # write list of tags ot /tmp/tags/html_file_dir/html_flile_name_without_ext
    local html_file_full
    while IFS= read -r html_file_full; do
        local file_name="${html_file_full##*/}"
        local dir="${html_file_full%/*}"
        mkdir -p "/tmp/tags/${dir}"
        grep_ignore_empty '<h. ' "${html_file_full}" | \
            sed -e 's;.*id=";;' -e 's;".*;;' > "/tmp/tags/${dir}/${file_name}" \
            || ferr "failed creating tag structure for ${html_file_full}"
    done < <(find "$ARANGO_BUILD_DOC_OUT" -name '*.html')


    echo "  - check if tags (files in /tmp/tags) are unique" #OK
    local error_occured=false
    debug "look for empty files" && find /tmp/tags -empty
    debug "look for empty files"
    while IFS= read -r htmlf; do
        local errors=$( comm -3  <(sort    "${htmlf}" | grep -v ^$ ) \
                                 <(sort -u "${htmlf}" | grep -v ^$ )
                      ) || ferr "compare - unique tags failed"

        if [[ -n "$errors" ]]; then
            echo "in ${htmlf}: "
            echo "$errors"
            echo ${htmlf#/tmp/tags} >> $ARANGO_BUILD_DOC/debug.log
            cat ${htmlf#/tmp/tags} >> $ARANGO_BUILD_DOC/debug.log
            error_occured=true
        fi
    done < <(find /tmp/tags -type f)

    if $error_occured; then
        echo "inspect $ARANGO_BUILD_DOC/debug.log"
        ferr "duplicate anchors detected - see above"
    fi


    echo "  - fetching anchors from generated http files"
    rm -f /tmp/anchorlist.txt
    for file in $(find "$ARANGO_BUILD_DOC_OUT" -name \*.html); do
        # go through html files (all books) in final dcoumentation and
        # strip off everything up to normal markdown-section (strips off menu)
        # strip off everything past page-footer
        # look for links a a href
        # exclude links with target _blank - links that go outside
        # just keep the link

        cat $file | \
            sed -r -n -e '/normal markdown-section/,${p}'| \
            sed -r -n -e '/.*id="page-footer".*/q;p' | \
            grep_ignore_empty '<a href="' | \
            grep_ignore_empty -v 'target="_blank"' | \
            sed -e 's;.*href=";;' -e 's;".*;;' > /tmp/thisdoc.txt || { ls -lisah "$file"; ferr "fail cat $file"; cat "$file"; }

        if [[ -f /tmp/thisdoc.txt ]]; then
            # Links with anchors:  foo#bar - foo might be empty, then it refers to this page
            cat /tmp/thisdoc.txt | grep_ignore_empty '#' | sed "s;\(.*\)#\(.*\);${file},\1,\2;" >> /tmp/anchorlist.txt || ferr "fail 1 cat thisdoc.txt for: $file"
            # links without anchors:
            cat /tmp/thisdoc.txt | grep_ignore_empty -v '#' | sed "s;\(.*\);${file},\1,;" >> /tmp/anchorlist.txt || ferr "fail 2 cat thisdoc.txt for file: $file"
        fi
    done

    echo "  - cross checking anchors" # OK
    local debug_anchors=false
    local dangling_anchor_count=0

    # loop vars that
    local anchor
    local relative_filename
    local full_filename

    while IFS=',' read -r full_filename relative_filename anchor; do
        $debug_anchors && debug "anchor $anchor"
        $debug_anchors && debug "relative_filename $relative_filename"
        $debug_anchors && debug "full_filename $full_filename"

        local check_filename
        if [[ -z "$relative_filename" ]]; then
            $debug_anchors && debug "using fullname"
            check_filename="$full_filename"
        else
            $debug_anchors && debug "using modified fullname"
            check_filename="${full_filename%/*html}/${relative_filename}"
        fi

        $debug_anchors && debug $check_filename

        # Browsers will resolve links like Foo/ to Foo/index.html automatically,
	# but our desired format is Foo/README.md in the source code and the
	# old Jenkins does not append index.html in tests, thus we disable it here
        #if [[ -d "$check_filename" ]]; then
        #    check_filename="${check_filename}/index.html"
        #fi

        if  ! [[ -f "/tmp/tags/${check_filename}" ]]; then
            err "File '/tmp/tags/${check_filename}' referenced by '$anchor' doesn't exist."
            err "full: '$full_filename' relative: '$relative_filename'"
            err ""
            debug "file missing" && exit 1
            (( dangling_anchor_count++ ))
        else
            if [[ -n "$anchor" ]]; then
                if ! grep -q "^$anchor$" "/tmp/tags/${check_filename}"; then
                    err "Anchor $anchor not found in $full_filename $relative_filename"
                    dangling_anchor_count=$((dangling_anchor_count + 1))
                    echo "available anchors in that file:"
                    sort < "/tmp/tags/${check_filename}"
                fi
            fi
        fi
    done < /tmp/anchorlist.txt || ferr "failed in anchorlist.txt loop"

    if (( dangling_anchor_count > 0 )); then
        ferr "${dangling_anchor_count} Dangling anchors found!"
    fi

    rm -rf /tmp/anchorlist.txt /tmp/tags
}
