#!/bin/bash
#
# Author - Jan Christoph Uhde - Copyright ArangoDB 2018
#
# Based on scripts by:
#   Wilfried Goesgens
#   Simran Brucherseifer
#

# TODO
# - try to find matching gitbook cache
#
# later:
# - move tmp to build dir - to allow parallel builds outside docker
# - allComments.txt - do not generate in source
# - images - do not genrate in source
# - Examples - do not generate in source
#

## get script dir
script_dir="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"

# Convert to Windows path in Cygwin, i.e. '/cygdrive/c/...' to 'C:\...'
# Will wrap multiple path in one go
# Examples:
# echo $(expand_cygpath "/cygdrive/c/path" "something" "/cygdrive/c/path/to/file.ext")
# some_comand $(expand_cygpath "${args[@]}")
# some_comand $(expand_cygpath "arg" "arg" "arg")

expand_cygpath() {
    local path
    local out=()
    for path in "$@"; do
        local matchre='^/cygdrive/'
        if type cygpath 1>/dev/null 2>/dev/null; then
            if [[ "$path" =~ $matchre ]]; then
                out+=("$(cygpath -w "$path")")
                continue
            fi
        fi
        out+=("$path")
    done
    echo "${out[@]}"
}

## set options for safety
# fail on unset variables
set -u
# "prevent failing_cmd | echo "still exit status 0 ` from succeeding"
set -o pipefail

ferr(){ echo "Error: $@"; exit 1; }

#### VARIABLES CONTROLLING THE BUILD ######################################
# The Variables are usually set by the docker entry point
#
# variables that MUST be set before invoking the script
#
[[ -v ARANGO_WORK ]] || ferr "ARANGO_WORK is not set"
[[ -d "$ARANGO_WORK" ]] || ferr "ARANGO_WORK is not a directory"
# control if there is debug output or not
ARANGO_DEBUG=false

# variables that SHOULD be set before invoking the script
# this list must match the versions provided in setup_gitbook
# usually both variables are set in the docker file
[[ -v ARANGO_SUPPORTED_BRANCHES ]] || ferr "supported branches not set"
[[ -v ARANGO_CACHE_BASE ]] || ferr "arango cache base not set"

# path to "arangodb" source
export ARANGO_SOURCE="${ARANGO_SOURCE:-"$ARANGO_WORK/ArangoDB"}"
export ARANGO_SOURCE_DOC="${ARANGO_SOURCE_DOC:-"$ARANGO_SOURCE/Documentation"}"
export ARANGO_SOURCE_DOC_BOOKS="${ARANGO_SOURCE_DOC_BOOKS:-"$ARANGO_SOURCE_DOC/Books"}"

# path to documentation build
export ARANGO_BUILD_DOC="${ARANGO_BUILD_DOC:-"$ARANGO_WORK/build-documentation"}"
export ARANGO_BUILD_DOC_PRE="${ARANGO_BUILD_DOC_PRE:-"$ARANGO_BUILD_DOC/books_pp"}"
export ARANGO_BUILD_DOC_OUT="${ARANGO_BUILD_DOC_OUT:-"$ARANGO_BUILD_DOC/books_html"}"

#### VARIABLES CONTROLLING THE BUILD - END ######################################

#### GOBAL SETUP ################################################################

# pull in bash_lib or create replacement functions
BASH_LIB="${BASH_LIB:-"$ARANGO_INSTALL/bash_lib"}"

if [ -f "$BASH_LIB" ]; then
    . "$BASH_LIB" || ferr "failed to source bash_lib"
    ferr(){ _o_ferrx "$@"; }

    err(){ _o_err "$@"; }
    section(){ _o_section "$@"; }
    say(){ _o_say "$@"; }
    success(){ _o_success "$@"; }

    if [[ -v ARANGO_NO_COLOR ]]; then
        for _c in _black _red _green _yellow _blue _magenta _cyan _white _bold _reset; do
            printf -v "$_c" %s ""
        done
        unset _c
    fi
else
    echo "could not source bash_lib"

    err(){ echo "Error: $@";  }
    section(){ echo "=================== $@ ================"; }
    say(){ echo "$@"; }
    success(){ echo "Success: $@"; }
fi

# define global functions
debug(){ $ARANGO_DEBUG && say "#-# DEBUG #-# " "$@" && return 0; return 1; }
. $NVM_DIR/nvm.sh || ferr "could not source nvm"
nvm use default || ferr "could not use nvm"

section "" | sed 's/-/=/g'
section "ArangoDB Documenation Build script" | sed 's/-/=/g'
section "" | sed 's/-/=/g'

# pull in build lib - this lib contains most of checks
. "$script_dir/buildLib" || ferr "failed to source buildLib"


#### GLOBAL VARS THAT SHOULD NOT BE MODIFIED BY USERS ########################################################
ALLBOOKS="HTTP AQL Cookbook Manual"
OTHER_MIME="pdf epub mobi"
TRIPPLETICS='```'

newVersionNumber="$( tr -d '\r\n' < "$ARANGO_SOURCE/VERSION" )"

# Include Drivers book from version 3.4 on
if minimum_version "${newVersionNumber}" "3.4"; then
    ALLBOOKS="${ALLBOOKS} Drivers"
fi

# If ../../VERSION contains the string "devel" the current date will be added to all pages containing the version.
if echo "${newVersionNumber}" | grep -q devel; then
    VERSION="${newVersionNumber} $(date +' %d. %b %Y ')"
    RELEASE_DIRECTORY=devel
else
    VERSION="${newVersionNumber}"
    RELEASE_DIRECTORY=$(sed "s;\\.[0-9]*$;;" <<< "${newVersionNumber}")
fi
export VERSION

declare -A ALL_GSEARCH_ID
for book in ${ALLBOOKS}; do
    ALL_GSEARCH_ID[$book]="$( grep "GSEARCH_ID_${book}" "$ARANGO_SOURCE/VERSIONS" |sed 's;.*"\([0-9a-zA-Z:_-]*\)".*;\1;' )"
done

GCHANGE_FREQ="$(grep "GCHANGE_FREQ" "$ARANGO_SOURCE/VERSIONS" |sed 's;.*"\([0-9a-zA-Z:]*\)".*;\1;')"
GPRIORITY="$(grep "GPRIORITY" "$ARANGO_SOURCE/VERSIONS" |sed 's;.*"\([0-9a-zA-Z.]*\)".*;\1;')"
BROWSEABLE_VERSIONS="$(grep "BROWSEABLE_VERSIONS" "$ARANGO_SOURCE/VERSIONS" |sed -e 's;" *$;;' -e 's;.*";;')"

INSTALLED_GITBOOK_VERSION="$(gitbook ls |grep '*'|sed "s;.*\* ;;")"
if test -z "${INSTALLED_GITBOOK_VERSION}"; then
    echo "your container doesn't come with a preloaded version of gitbook, please update it."
    exit 1
fi
GITBOOK_ARGS=(--gitbook "${INSTALLED_GITBOOK_VERSION}")
#### GLOBAL VARS THAT SHOULD NOT BE MODIFIED BY USERS - END ########################################################


################################################################################
### TARGET FUNCTIONS ###########################################################
################################################################################

function build_book() {
    local book_name="$1"
    local book_src="$ARANGO_SOURCE_DOC_BOOKS/${book_name}"
    local book_pre="$ARANGO_BUILD_DOC_PRE/${book_name}"
    local book_out="$ARANGO_BUILD_DOC_OUT/${book_name}"

    section "Build Book - ${book_name}" | sed 's/-/=/g' | sed 's/ = / - /'
    echo "book source:       $book_src"
    echo "preprocessing dir: $book_pre"
    echo "output dir:        $book_out"

    mkdir -p "$book_pre" || ferr "failed to create preprocessing directory"
    mkdir -p "$book_out" || ferr "failed to create output directory"

    rm -fr "$book_src/?" #TODO fix ditaa - probably happens because user has no real home directory

    ##########################################################################
    book_src_checks "${book_name}" "$book_src" "$book_pre" "$book_out" || ferr "failed source check"

    ##########################################################################
    section "Preprocess - Book ${book_name}"

    say " - copy directory structure"
    ## copy directroy structure of
    ## arangodb/Documentation/Books/${book_name}
    ## to ppdir
    cd "$book_src" || ferr "could not enter book source dir: $book_src"
    find . -type d -exec mkdir -p "$book_pre/{}" \;
    debug && tree "$book_pre" && echo

    say   " - create images"
    run_ditaa "${book_name}" "$book_src" "$book_pre" "$book_out" && echo
    rm -fr "$book_src/?" #TODO fix / better remove ditta

    # copy / link SUMMARY.md and FOOTER.html
    say " - create SUMMARY.md"
    [[ -L "$book_pre/SUMMARY.md" ]] || cp "$book_src/SUMMARY.md" "$book_pre" || ferr "failed to SUMMARY"
    say " - create FOOTER.html"
    [[ -f "$book_pre/FOOTER.html" ]] || ln -s "$book_src/FOOTER.html" "$book_pre" || ferr "failed FOOTER"

    # copy styles
    say " - copy styles"
    cd "$book_pre"
    rsync -rh "$book_src/styles" "$book_pre" || ferr "failed to rsync styles"

    # copy book template
    say " - copy book.json"
    [[ -f "$book_pre/book.json" ]] || cp "${book_src}/book.json" "$book_pre"


    # generateMdFiles
    say " - generate .md-files"
    cd "$ARANGO_SOURCE_DOC_BOOKS" #must be run in that location

    ensure_cmd python3 $(expand_cygpath \
        "$ARANGO_WORK/../containers/documentation.docker/generateMdFiles.py" \
        "${book_name}" \
        "${ARANGO_SOURCE}" \
        "$ARANGO_BUILD_DOC_PRE" \
        "${FILTER:-""}" \
    ) || ferr "failed to generate .md-files $?"

    test -d "$ARANGO_BUILD_DOC_OUT" || mkdir -p "$ARANGO_BUILD_DOC_OUT"

    ##########################################################################
    book_pre_checks "${book_name}" "$book_src" "$book_pre" "$book_out"

    ##########################################################################
    section "Building Book - ${book_name}"
    # expand versions in files
    say " - replace placeholders in templates"
    cd "$book_pre"
    for file in book.json styles/header.js README.md; do
        if [[ -f $file ]]; then
            say "   - running sed on $file"
            sed -e "s/VERSION_NUMBER/v${VERSION}/g" \
                -e "s;/devel;/${RELEASE_DIRECTORY};" \
                -e "s;@GSEARCH_ID@;${ALL_GSEARCH_ID[${book_name}]};" \
                -e "s;@GCHANGE_FREQ@;${GCHANGE_FREQ};" \
                -e "s;@GPRIORITY@;${GPRIORITY};" \
                -e "s;@BROWSEABLE_VERSIONS@;${BROWSEABLE_VERSIONS};" \
                \
                -i "${file}" || ferr "failed to run sed to subsitute variables"
        else
            echo "there is no file: $file in $book_pre"
        fi
    done

    say " - detect cache in $ARANGO_CACHE_BASE"
    this="$(mktemp)"
    # In the command below we must replace all templates that re not in a
    # string e.g. numbers. Otherwise jq will fail. So if something goes
    # wrong here you probably need antoher sed command
    cat "$book_src/book.json" | sed -e 's/@GPRIORITY@/0/' | jq .plugins > "$this" \
        || ferr "failed to extract plugins from source books.json. Make sure it contains valid json!"

    unset book_cache
    while read -r file; do
        local dir="${file%/*}"
        if cmp --silent "$this" "$file"; then
            debug "compare with $file"
            local book_cache="$dir"
            echo "  - found match in $dir"
            break
        fi
    done < <(find "$ARANGO_CACHE_BASE" -iname "book.json.plugins" )
    rm "$this"

    local msg="failed to detect cache - book.json of $book_name\n"
          msg+="Plugins do not match any cached version."
          msg+="If you use new plugins make sure to add this branch"
          msg+="to ARANGO_SUPPORTED_BRANCHES and rebuild the doc container."
    [[ -v book_cache ]] || ferr -e "$msg"


    #copy gitbook modules from cache in build image
    say " - copy node modules"
    cp -r "$book_cache/node_modules" "$book_pre" || ferr "failed to copy node modules"

    say " - run gitbook"

    run_gitbook $(expand_cygpath "$book_cache" build "$book_pre" "$book_out") || ferr "fail exectuting run_gitbook"
    unset cache

    say " - delete FOOTER.html"
    rm -f "$book_pre/FOOTER.html"

    # work around bug
    say " - deleting markdown files in output (gitbook 3.x bug)"
    find "$book_out" -type f -name "*.md" -delete

    ##########################################################################
    book_out_checks "${book_name}" "$book_src" "$book_pre" "$book_out" || ferr "fail"
}


build_books() {
    local books="$1"
    section "" | sed 's/-/=/g'
    section "Build Books: $books" | sed 's/-/=/g'
    local flushpp=true
    local flushout=true

    cross_src_checks || ferr "docublocks check failed"
    echo checks done

    section "" | sed 's/-/=/g'
    section "Preprocess All Books"
    # codeBlockReader creates the file AllComments.txt in the source dir `Documentation/Books`
    # TODO
    # - comment purpose and format of the created file
    # - make script position independent
    say " - codeBlockReader: create AllCommands.txt"
    cd "$ARANGO_SOURCE_DOC_BOOKS" #TODO remove -- required by script below
    run_cmd python $(expand_cygpath "$ARANGO_SOURCE/Documentation/Scripts/codeBlockReader.py") && echo || ferr "can not run codeBlockReader.py"

    for book in $books; do
        local book_src="$ARANGO_SOURCE_DOC_BOOKS/${book}"
        local book_pre="$ARANGO_BUILD_DOC_PRE/${book}"
        local book_out="$ARANGO_BUILD_DOC_OUT/${book}"

        if $flushout; then
            rm -fr "$book_out" || ferr "could not delete book output dir $book_out"
            mkdir -p "$book_out"
        fi

        if $flushpp; then
            rm -fr "$book_pre" || ferr "could not delete book preprocessing dir $book_pre"
            mkdir -p "$book_pre"
        fi

        build_book "${book}" "$@"
    done

    section "" | sed 's/-/=/g'
    section "Post All Books"
    echo " - Generating redirect index.html unconditionally (depends on book Manual)"; \
    echo '<html><head><meta http-equiv="refresh" content="0; url=Manual/"></head><body></body></html>' \
        > "$ARANGO_BUILD_DOC_OUT/index.html"

    if [[ "$books" == "$ALLBOOKS" ]]; then
        cross_pre_out_checks || ferr "failed to check for dangling anchors"
    fi

}

################################################################################
### MAIN FUNCTIONS #############################################################
################################################################################


# main does parsing and calls functions for targets
main(){
    show_config "$@"

    test -d "$ARANGO_BUILD_DOC_OUT" || mkdir -p "$ARANGO_BUILD_DOC_OUT"
    test -d "$ARANGO_BUILD_DOC_PRE" || mkdir -p "$ARANGO_BUILD_DOC_PRE"

    # parse args
    local keep_old=false
    local all_formats=false
    local books="$ALLBOOKS"
    for arg in "$@"; do
        case $arg in
            --keep-old)
                keep_old=true
                shift
            ;;
            --all-formats)
                all_formats=true
                shift
            ;;
            --books)
                books="$2"
                shift 2
            ;;
            --cross-check*)
                cross_src_checks
                cross_pre_out_checks
                success "executing cross-checks" && exit
            ;;
            --check*)
                cross_src_checks

                local book
                for book in $books; do
                    local book_name="$book"
                    local book_src="$ARANGO_SOURCE_DOC_BOOKS/${book_name}"
                    local book_pre="$ARANGO_BUILD_DOC_PRE/${book_name}"
                    local book_out="$ARANGO_BUILD_DOC_OUT/${book_name}"

                    book_src_checks "${book_name}" "$book_src" "$book_pre" "$book_out"
                    book_pre_checks "${book_name}" "$book_src" "$book_pre" "$book_out"
                    book_out_checks "${book_name}" "$book_src" "$book_pre" "$book_out"
                done

                cross_pre_out_checks
                success "executing checks" && exit
                exit
            ;;
            *)
                shift
            ;;
        esac
    done

    # keep or delete files from last build
    if $keep_old; then
        rm -fr "$ARANGO_BUILD_DOC_OUT" || ferr "could not delete books output dir"
        rm -fr "$ARANGO_BUILD_DOC_PRE" || ferr "could not delete ppdir dir"
    fi
    test -d "$ARANGO_BUILD_DOC_OUT" || mkdir -p "$ARANGO_BUILD_DOC_OUT" || ferr "could not create books output dir"
    test -d "$ARANGO_BUILD_DOC_PRE" || mkdir -p "$ARANGO_BUILD_DOC_PRE" || ferr "could not create ppdir dir"

    #build html and run checks
    build_books "$books" || ferr "fail"

    local out="${ARANGO_BUILD_DOC}/ArangoDB-${newVersionNumber}"
    cp -r "$ARANGO_BUILD_DOC_OUT" "$out" || ferr "failed to copy html documentation" #rather move

    cd "$ARANGO_BUILD_DOC"
    run_cmd tar -C "$ARANGO_BUILD_DOC" -czf "$out.tar.gz" "ArangoDB-${newVersionNumber}" \
        || ferr "failed to tar html documentation"
    rm -fr "$out" || err "failed to delete documentation copy"

    # build other formats
    if $all_formats; then
        for book_name in $ALLBOOKS; do
            for format in $OTHER_MIME; do
                local out="${ARANGO_BUILD_DOC}/ArangoDB_${book_name}_${newVersionNumber}.${format}"
                run_gitbook "fake cache" "${GITBOOK_ARGS[@]}" "${format}" $(expand_cygpath "$ARANGO_BUILD_DOC_PRE/$book_name" "${out}") || ferr "fail"
            done
        done || ferr "failed to build all formats"
    fi

    echo
    success "building documentation"
    echo
}

main "$@"
exit $?
